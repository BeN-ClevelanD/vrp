Filename: vrp-2-1-1.txt
Algorithm: vqe_coblya_RA.py
Run: 1
Output: Route for Vehicle 1: [0, 2, 1, 0]
Optimal cost: 1036
Time taken: 3.3943822383880615 seconds
Error: 

--------------------------------------------------
Filename: vrp-2-1-1.txt
Algorithm: vqe_coblya_RA.py
Run: 2
Output: Route for Vehicle 1: [0, 2, 1, 0]
Optimal cost: 1036
Time taken: 3.377760648727417 seconds
Error: 

--------------------------------------------------
Filename: vrp-2-1-1.txt
Algorithm: vqe_coblya_RA.py
Run: 3
Output: Route for Vehicle 1: [0, 2, 1, 0]
Optimal cost: 1036
Time taken: 3.3294479846954346 seconds
Error: 

--------------------------------------------------
Filename: vrp-2-1-1.txt
Algorithm: vqe_coblya_RA.py
Run: 1
Output: Route for Vehicle 1: [0, 2, 1, 0]
Optimal cost: 1036
Time taken: 3.5124692916870117 seconds
Error: 

--------------------------------------------------
Filename: vrp-2-1-1.txt
Algorithm: vqe_coblya_RA.py
Run: 2
Output: Route for Vehicle 1: [0, 2, 1, 0]
Optimal cost: 1036
Time taken: 3.442673683166504 seconds
Error: 

--------------------------------------------------
Filename: vrp-2-1-1.txt
Algorithm: vqe_coblya_RA.py
Run: 3
Output: Route for Vehicle 1: [0, 2, 1, 0]
Optimal cost: 1036
Time taken: 3.115037202835083 seconds
Error: 

--------------------------------------------------
Filename: vrp-3-1-1.txt
Algorithm: vqe_coblya_RA.py
Run: 1
Output: Route for Vehicle 1: [0, 1, 3, 2, 0]
Optimal cost: 1190
Time taken: 115.96276092529297 seconds
Error: 

--------------------------------------------------
Filename: vrp-3-1-1.txt
Algorithm: vqe_coblya_RA.py
Run: 2
Output: Route for Vehicle 1: [0, 1, 3, 2, 0]
Optimal cost: 1190
Time taken: 118.94861769676208 seconds
Error: 

--------------------------------------------------
Filename: vrp-3-1-1.txt
Algorithm: vqe_coblya_RA.py
Run: 3
Output: Route for Vehicle 1: [0, 1, 3, 2, 0]
Optimal cost: 1190
Time taken: 117.39293837547302 seconds
Error: 

--------------------------------------------------
Filename: vrp-3-1-1.txt
Algorithm: vqe_coblya_RA.py
Run: 1
Output: Route for Vehicle 1: [0, 1, 3, 2, 0]
Optimal cost: 1190
Time taken: 121.24877524375916 seconds
Error: 

--------------------------------------------------
Filename: vrp-3-1-1.txt
Algorithm: vqe_coblya_RA.py
Run: 2
Output: Route for Vehicle 1: [0, 1, 3, 2, 0]
Optimal cost: 1190
Time taken: 121.80744767189026 seconds
Error: 

--------------------------------------------------
Filename: vrp-3-1-1.txt
Algorithm: vqe_coblya_RA.py
Run: 3
Output: Route for Vehicle 1: [0, 1, 3, 2, 0]
Optimal cost: 1190
Time taken: 121.58402895927429 seconds
Error: 

--------------------------------------------------
Filename: vrp-3-2-1.txt
Algorithm: vqe_coblya_RA.py
Run: 1
Output: Route for Vehicle 1: [0, 1, 0]
Route for Vehicle 2: [0, 2, 3, 0]
Optimal cost: 1442
Time taken: 113.81954622268677 seconds
Error: 

--------------------------------------------------
Filename: vrp-3-2-1.txt
Algorithm: vqe_coblya_RA.py
Run: 2
Output: Route for Vehicle 1: [0, 1, 0]
Route for Vehicle 2: [0, 2, 3, 0]
Optimal cost: 1442
Time taken: 115.85052156448364 seconds
Error: 

--------------------------------------------------
Filename: vrp-3-2-1.txt
Algorithm: vqe_coblya_RA.py
Run: 3
Output: Route for Vehicle 1: [0, 1, 0]
Route for Vehicle 2: [0, 2, 3, 0]
Optimal cost: 1442
Time taken: 116.65646862983704 seconds
Error: 

--------------------------------------------------
Filename: vrp-3-2-1.txt
Algorithm: vqe_coblya_RA.py
Run: 1
Output: Route for Vehicle 1: [0, 1, 0]
Route for Vehicle 2: [0, 2, 3, 0]
Optimal cost: 1442
Time taken: 120.4664556980133 seconds
Error: 

--------------------------------------------------
Filename: vrp-3-2-1.txt
Algorithm: vqe_coblya_RA.py
Run: 2
Output: Route for Vehicle 1: [0, 1, 0]
Route for Vehicle 2: [0, 2, 3, 0]
Optimal cost: 1442
Time taken: 120.00639700889587 seconds
Error: 

--------------------------------------------------
Filename: vrp-3-2-1.txt
Algorithm: vqe_coblya_RA.py
Run: 3
Output: Route for Vehicle 1: [0, 1, 0]
Route for Vehicle 2: [0, 2, 3, 0]
Optimal cost: 1442
Time taken: 117.65629315376282 seconds
Error: 

--------------------------------------------------
Filename: vrp-4-3-3.txt
Algorithm: vqe_coblya_RA.py
Run: 1
Error: Timeout expired after 21600 seconds

--------------------------------------------------
Filename: vrp-5-4-1.txt
Algorithm: vqe_coblya_RA.py
Run: 1
Output: 
Error: Killed

--------------------------------------------------
Filename: vrp-5-4-1.txt
Algorithm: vqe_coblya_RA.py
Run: 2
Output: 
Error: Killed

--------------------------------------------------
Filename: vrp-5-4-1.txt
Algorithm: vqe_coblya_RA.py
Run: 3
Output: 
Error: Killed

--------------------------------------------------
Filename: vrp-5-4-1.txt
Algorithm: vqe_coblya_RA.py
Run: 1
Output: 
Error: Killed

--------------------------------------------------
Filename: vrp-5-4-1.txt
Algorithm: vqe_coblya_RA.py
Run: 2
Output: 
Error: Killed

--------------------------------------------------
Filename: vrp-5-4-1.txt
Algorithm: vqe_coblya_RA.py
Run: 3
Output: 
Error: Killed

--------------------------------------------------
Filename: vrp-4-1-1.txt
Algorithm: vqe_coblya_RA.py
Run: 1
Error: Timeout expired after 21600 seconds

--------------------------------------------------
Filename: vrp-6-5-1.txt
Algorithm: vqe_coblya_RA.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 64.0 TiB for an array with shape (4398046511104,) and data type complex128

--------------------------------------------------
Filename: vrp-6-5-1.txt
Algorithm: vqe_coblya_RA.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 64.0 TiB for an array with shape (4398046511104,) and data type complex128

--------------------------------------------------
Filename: vrp-6-5-1.txt
Algorithm: vqe_coblya_RA.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 64.0 TiB for an array with shape (4398046511104,) and data type complex128

--------------------------------------------------
Filename: vrp-6-5-1.txt
Algorithm: vqe_coblya_RA.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 64.0 TiB for an array with shape (4398046511104,) and data type complex128

--------------------------------------------------
Filename: vrp-6-5-1.txt
Algorithm: vqe_coblya_RA.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 64.0 TiB for an array with shape (4398046511104,) and data type complex128

--------------------------------------------------
Filename: vrp-6-5-1.txt
Algorithm: vqe_coblya_RA.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 64.0 TiB for an array with shape (4398046511104,) and data type complex128

--------------------------------------------------
Filename: vrp-4-2-1.txt
Algorithm: vqe_coblya_RA.py
Run: 1
Error: Timeout expired after 21600 seconds

--------------------------------------------------
Filename: vrp-7-6-1.txt
Algorithm: vqe_coblya_RA.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 1.00 EiB for an array with shape (72057594037927936,) and data type complex128

--------------------------------------------------
Filename: vrp-7-6-1.txt
Algorithm: vqe_coblya_RA.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 1.00 EiB for an array with shape (72057594037927936,) and data type complex128

--------------------------------------------------
Filename: vrp-7-6-1.txt
Algorithm: vqe_coblya_RA.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 1.00 EiB for an array with shape (72057594037927936,) and data type complex128

--------------------------------------------------
Filename: vrp-7-6-1.txt
Algorithm: vqe_coblya_RA.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 1.00 EiB for an array with shape (72057594037927936,) and data type complex128

--------------------------------------------------
Filename: vrp-7-6-1.txt
Algorithm: vqe_coblya_RA.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 1.00 EiB for an array with shape (72057594037927936,) and data type complex128

--------------------------------------------------
Filename: vrp-7-6-1.txt
Algorithm: vqe_coblya_RA.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 1.00 EiB for an array with shape (72057594037927936,) and data type complex128

--------------------------------------------------
Filename: vrp-8-7-1.txt
Algorithm: vqe_coblya_RA.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-8-7-1.txt
Algorithm: vqe_coblya_RA.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-8-7-1.txt
Algorithm: vqe_coblya_RA.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-8-7-1.txt
Algorithm: vqe_coblya_RA.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-8-7-1.txt
Algorithm: vqe_coblya_RA.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-8-7-1.txt
Algorithm: vqe_coblya_RA.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-5-3-1.txt
Algorithm: vqe_coblya_RA.py
Run: 1
Output: 
Error: Killed

--------------------------------------------------
Filename: vrp-5-3-1.txt
Algorithm: vqe_coblya_RA.py
Run: 2
Output: 
Error: Killed

--------------------------------------------------
Filename: vrp-5-3-1.txt
Algorithm: vqe_coblya_RA.py
Run: 3
Output: 
Error: Killed

--------------------------------------------------
Filename: vrp-5-3-1.txt
Algorithm: vqe_coblya_RA.py
Run: 1
Output: 
Error: Killed

--------------------------------------------------
Filename: vrp-5-3-1.txt
Algorithm: vqe_coblya_RA.py
Run: 2
Output: 
Error: Killed

--------------------------------------------------
Filename: vrp-5-3-1.txt
Algorithm: vqe_coblya_RA.py
Run: 3
Output: 
Error: Killed

--------------------------------------------------
Filename: vrp-5-1-1.txt
Algorithm: vqe_coblya_RA.py
Run: 1
Output: 
Error: Killed

--------------------------------------------------
Filename: vrp-5-1-1.txt
Algorithm: vqe_coblya_RA.py
Run: 2
Output: 
Error: Killed

--------------------------------------------------
Filename: vrp-5-1-1.txt
Algorithm: vqe_coblya_RA.py
Run: 3
Output: 
Error: Killed

--------------------------------------------------
Filename: vrp-5-1-1.txt
Algorithm: vqe_coblya_RA.py
Run: 1
Output: 
Error: Killed

--------------------------------------------------
Filename: vrp-5-1-1.txt
Algorithm: vqe_coblya_RA.py
Run: 2
Output: 
Error: Killed

--------------------------------------------------
Filename: vrp-5-1-1.txt
Algorithm: vqe_coblya_RA.py
Run: 3
Output: 
Error: Killed

--------------------------------------------------
Filename: vrp-10-8-1.txt
Algorithm: vqe_coblya_RA.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-10-8-1.txt
Algorithm: vqe_coblya_RA.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-10-8-1.txt
Algorithm: vqe_coblya_RA.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-10-8-1.txt
Algorithm: vqe_coblya_RA.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-10-8-1.txt
Algorithm: vqe_coblya_RA.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-10-8-1.txt
Algorithm: vqe_coblya_RA.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-5-2-1.txt
Algorithm: vqe_coblya_RA.py
Run: 1
Output: 
Error: Killed

--------------------------------------------------
Filename: vrp-5-2-1.txt
Algorithm: vqe_coblya_RA.py
Run: 2
Output: 
Error: Killed

--------------------------------------------------
Filename: vrp-5-2-1.txt
Algorithm: vqe_coblya_RA.py
Run: 3
Output: 
Error: Killed

--------------------------------------------------
Filename: vrp-5-2-1.txt
Algorithm: vqe_coblya_RA.py
Run: 1
Output: 
Error: Killed

--------------------------------------------------
Filename: vrp-5-2-1.txt
Algorithm: vqe_coblya_RA.py
Run: 2
Output: 
Error: Killed

--------------------------------------------------
Filename: vrp-5-2-1.txt
Algorithm: vqe_coblya_RA.py
Run: 3
Output: 
Error: Killed

--------------------------------------------------
Filename: vrp-6-4-1.txt
Algorithm: vqe_coblya_RA.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 64.0 TiB for an array with shape (4398046511104,) and data type complex128

--------------------------------------------------
Filename: vrp-6-4-1.txt
Algorithm: vqe_coblya_RA.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 64.0 TiB for an array with shape (4398046511104,) and data type complex128

--------------------------------------------------
Filename: vrp-6-4-1.txt
Algorithm: vqe_coblya_RA.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 64.0 TiB for an array with shape (4398046511104,) and data type complex128

--------------------------------------------------
Filename: vrp-6-4-1.txt
Algorithm: vqe_coblya_RA.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 64.0 TiB for an array with shape (4398046511104,) and data type complex128

--------------------------------------------------
Filename: vrp-6-4-1.txt
Algorithm: vqe_coblya_RA.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 64.0 TiB for an array with shape (4398046511104,) and data type complex128

--------------------------------------------------
Filename: vrp-6-4-1.txt
Algorithm: vqe_coblya_RA.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 64.0 TiB for an array with shape (4398046511104,) and data type complex128

--------------------------------------------------
Filename: vrp-6-1-1.txt
Algorithm: vqe_coblya_RA.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 64.0 TiB for an array with shape (4398046511104,) and data type complex128

--------------------------------------------------
Filename: vrp-6-1-1.txt
Algorithm: vqe_coblya_RA.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 64.0 TiB for an array with shape (4398046511104,) and data type complex128

--------------------------------------------------
Filename: vrp-6-1-1.txt
Algorithm: vqe_coblya_RA.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 64.0 TiB for an array with shape (4398046511104,) and data type complex128

--------------------------------------------------
Filename: vrp-6-1-1.txt
Algorithm: vqe_coblya_RA.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 64.0 TiB for an array with shape (4398046511104,) and data type complex128

--------------------------------------------------
Filename: vrp-6-1-1.txt
Algorithm: vqe_coblya_RA.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 64.0 TiB for an array with shape (4398046511104,) and data type complex128

--------------------------------------------------
Filename: vrp-6-1-1.txt
Algorithm: vqe_coblya_RA.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 64.0 TiB for an array with shape (4398046511104,) and data type complex128

--------------------------------------------------
Filename: vrp-7-5-1.txt
Algorithm: vqe_coblya_RA.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 1.00 EiB for an array with shape (72057594037927936,) and data type complex128

--------------------------------------------------
Filename: vrp-7-5-1.txt
Algorithm: vqe_coblya_RA.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 1.00 EiB for an array with shape (72057594037927936,) and data type complex128

--------------------------------------------------
Filename: vrp-7-5-1.txt
Algorithm: vqe_coblya_RA.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 1.00 EiB for an array with shape (72057594037927936,) and data type complex128

--------------------------------------------------
Filename: vrp-7-5-1.txt
Algorithm: vqe_coblya_RA.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 1.00 EiB for an array with shape (72057594037927936,) and data type complex128

--------------------------------------------------
Filename: vrp-7-5-1.txt
Algorithm: vqe_coblya_RA.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 1.00 EiB for an array with shape (72057594037927936,) and data type complex128

--------------------------------------------------
Filename: vrp-7-5-1.txt
Algorithm: vqe_coblya_RA.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 1.00 EiB for an array with shape (72057594037927936,) and data type complex128

--------------------------------------------------
Filename: vrp-8-6-1.txt
Algorithm: vqe_coblya_RA.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-8-6-1.txt
Algorithm: vqe_coblya_RA.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-8-6-1.txt
Algorithm: vqe_coblya_RA.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-8-6-1.txt
Algorithm: vqe_coblya_RA.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-8-6-1.txt
Algorithm: vqe_coblya_RA.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-8-6-1.txt
Algorithm: vqe_coblya_RA.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-6-2-1.txt
Algorithm: vqe_coblya_RA.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 64.0 TiB for an array with shape (4398046511104,) and data type complex128

--------------------------------------------------
Filename: vrp-6-2-1.txt
Algorithm: vqe_coblya_RA.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 64.0 TiB for an array with shape (4398046511104,) and data type complex128

--------------------------------------------------
Filename: vrp-6-2-1.txt
Algorithm: vqe_coblya_RA.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 64.0 TiB for an array with shape (4398046511104,) and data type complex128

--------------------------------------------------
Filename: vrp-6-2-1.txt
Algorithm: vqe_coblya_RA.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 64.0 TiB for an array with shape (4398046511104,) and data type complex128

--------------------------------------------------
Filename: vrp-6-2-1.txt
Algorithm: vqe_coblya_RA.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 64.0 TiB for an array with shape (4398046511104,) and data type complex128

--------------------------------------------------
Filename: vrp-6-2-1.txt
Algorithm: vqe_coblya_RA.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 64.0 TiB for an array with shape (4398046511104,) and data type complex128

--------------------------------------------------
Filename: vrp-10-7-1.txt
Algorithm: vqe_coblya_RA.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-10-7-1.txt
Algorithm: vqe_coblya_RA.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-10-7-1.txt
Algorithm: vqe_coblya_RA.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-10-7-1.txt
Algorithm: vqe_coblya_RA.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-10-7-1.txt
Algorithm: vqe_coblya_RA.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-10-7-1.txt
Algorithm: vqe_coblya_RA.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-8-5-1.txt
Algorithm: vqe_coblya_RA.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-8-5-1.txt
Algorithm: vqe_coblya_RA.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-8-5-1.txt
Algorithm: vqe_coblya_RA.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-8-5-1.txt
Algorithm: vqe_coblya_RA.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-8-5-1.txt
Algorithm: vqe_coblya_RA.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-8-5-1.txt
Algorithm: vqe_coblya_RA.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-7-4-1.txt
Algorithm: vqe_coblya_RA.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 1.00 EiB for an array with shape (72057594037927936,) and data type complex128

--------------------------------------------------
Filename: vrp-7-4-1.txt
Algorithm: vqe_coblya_RA.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 1.00 EiB for an array with shape (72057594037927936,) and data type complex128

--------------------------------------------------
Filename: vrp-7-4-1.txt
Algorithm: vqe_coblya_RA.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 1.00 EiB for an array with shape (72057594037927936,) and data type complex128

--------------------------------------------------
Filename: vrp-7-4-1.txt
Algorithm: vqe_coblya_RA.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 1.00 EiB for an array with shape (72057594037927936,) and data type complex128

--------------------------------------------------
Filename: vrp-7-4-1.txt
Algorithm: vqe_coblya_RA.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 1.00 EiB for an array with shape (72057594037927936,) and data type complex128

--------------------------------------------------
Filename: vrp-7-4-1.txt
Algorithm: vqe_coblya_RA.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 1.00 EiB for an array with shape (72057594037927936,) and data type complex128

--------------------------------------------------
Filename: vrp-6-3-1.txt
Algorithm: vqe_coblya_RA.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 64.0 TiB for an array with shape (4398046511104,) and data type complex128

--------------------------------------------------
Filename: vrp-6-3-1.txt
Algorithm: vqe_coblya_RA.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 64.0 TiB for an array with shape (4398046511104,) and data type complex128

--------------------------------------------------
Filename: vrp-6-3-1.txt
Algorithm: vqe_coblya_RA.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 64.0 TiB for an array with shape (4398046511104,) and data type complex128

--------------------------------------------------
Filename: vrp-6-3-1.txt
Algorithm: vqe_coblya_RA.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 64.0 TiB for an array with shape (4398046511104,) and data type complex128

--------------------------------------------------
Filename: vrp-6-3-1.txt
Algorithm: vqe_coblya_RA.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 64.0 TiB for an array with shape (4398046511104,) and data type complex128

--------------------------------------------------
Filename: vrp-6-3-1.txt
Algorithm: vqe_coblya_RA.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 64.0 TiB for an array with shape (4398046511104,) and data type complex128

--------------------------------------------------
Filename: vrp-8-1-1.txt
Algorithm: vqe_coblya_RA.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-8-1-1.txt
Algorithm: vqe_coblya_RA.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-8-1-1.txt
Algorithm: vqe_coblya_RA.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-8-1-1.txt
Algorithm: vqe_coblya_RA.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-8-1-1.txt
Algorithm: vqe_coblya_RA.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-8-1-1.txt
Algorithm: vqe_coblya_RA.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-8-4-1.txt
Algorithm: vqe_coblya_RA.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-8-4-1.txt
Algorithm: vqe_coblya_RA.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-8-4-1.txt
Algorithm: vqe_coblya_RA.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-8-4-1.txt
Algorithm: vqe_coblya_RA.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-8-4-1.txt
Algorithm: vqe_coblya_RA.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-8-4-1.txt
Algorithm: vqe_coblya_RA.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-10-6-1.txt
Algorithm: vqe_coblya_RA.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-10-6-1.txt
Algorithm: vqe_coblya_RA.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-10-6-1.txt
Algorithm: vqe_coblya_RA.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-10-6-1.txt
Algorithm: vqe_coblya_RA.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-10-6-1.txt
Algorithm: vqe_coblya_RA.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-10-6-1.txt
Algorithm: vqe_coblya_RA.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-8-3-1.txt
Algorithm: vqe_coblya_RA.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-8-3-1.txt
Algorithm: vqe_coblya_RA.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-8-3-1.txt
Algorithm: vqe_coblya_RA.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-8-3-1.txt
Algorithm: vqe_coblya_RA.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-8-3-1.txt
Algorithm: vqe_coblya_RA.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-8-3-1.txt
Algorithm: vqe_coblya_RA.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-8-2-1.txt
Algorithm: vqe_coblya_RA.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-8-2-1.txt
Algorithm: vqe_coblya_RA.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-8-2-1.txt
Algorithm: vqe_coblya_RA.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-8-2-1.txt
Algorithm: vqe_coblya_RA.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-8-2-1.txt
Algorithm: vqe_coblya_RA.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-8-2-1.txt
Algorithm: vqe_coblya_RA.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-10-5-1.txt
Algorithm: vqe_coblya_RA.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-10-5-1.txt
Algorithm: vqe_coblya_RA.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-10-5-1.txt
Algorithm: vqe_coblya_RA.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-10-5-1.txt
Algorithm: vqe_coblya_RA.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-10-5-1.txt
Algorithm: vqe_coblya_RA.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-10-5-1.txt
Algorithm: vqe_coblya_RA.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-10-1-1.txt
Algorithm: vqe_coblya_RA.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-10-1-1.txt
Algorithm: vqe_coblya_RA.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-10-1-1.txt
Algorithm: vqe_coblya_RA.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-10-1-1.txt
Algorithm: vqe_coblya_RA.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-10-1-1.txt
Algorithm: vqe_coblya_RA.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-10-1-1.txt
Algorithm: vqe_coblya_RA.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-10-4-1.txt
Algorithm: vqe_coblya_RA.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-10-4-1.txt
Algorithm: vqe_coblya_RA.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-10-4-1.txt
Algorithm: vqe_coblya_RA.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-10-4-1.txt
Algorithm: vqe_coblya_RA.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-10-4-1.txt
Algorithm: vqe_coblya_RA.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-10-4-1.txt
Algorithm: vqe_coblya_RA.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-10-3-1.txt
Algorithm: vqe_coblya_RA.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-10-3-1.txt
Algorithm: vqe_coblya_RA.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-10-3-1.txt
Algorithm: vqe_coblya_RA.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-10-3-1.txt
Algorithm: vqe_coblya_RA.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-10-3-1.txt
Algorithm: vqe_coblya_RA.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-10-3-1.txt
Algorithm: vqe_coblya_RA.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-15-8-1.txt
Algorithm: vqe_coblya_RA.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-15-8-1.txt
Algorithm: vqe_coblya_RA.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-15-8-1.txt
Algorithm: vqe_coblya_RA.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-15-8-1.txt
Algorithm: vqe_coblya_RA.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-15-8-1.txt
Algorithm: vqe_coblya_RA.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-15-8-1.txt
Algorithm: vqe_coblya_RA.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-15-7-1.txt
Algorithm: vqe_coblya_RA.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-15-7-1.txt
Algorithm: vqe_coblya_RA.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-15-7-1.txt
Algorithm: vqe_coblya_RA.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-15-7-1.txt
Algorithm: vqe_coblya_RA.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-15-7-1.txt
Algorithm: vqe_coblya_RA.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-15-7-1.txt
Algorithm: vqe_coblya_RA.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-15-6-1.txt
Algorithm: vqe_coblya_RA.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-15-6-1.txt
Algorithm: vqe_coblya_RA.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-15-6-1.txt
Algorithm: vqe_coblya_RA.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-15-6-1.txt
Algorithm: vqe_coblya_RA.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-15-6-1.txt
Algorithm: vqe_coblya_RA.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-15-6-1.txt
Algorithm: vqe_coblya_RA.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-15-5-1.txt
Algorithm: vqe_coblya_RA.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-15-5-1.txt
Algorithm: vqe_coblya_RA.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-15-5-1.txt
Algorithm: vqe_coblya_RA.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-15-5-1.txt
Algorithm: vqe_coblya_RA.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-15-5-1.txt
Algorithm: vqe_coblya_RA.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-15-5-1.txt
Algorithm: vqe_coblya_RA.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-15-1-1.txt
Algorithm: vqe_coblya_RA.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-15-1-1.txt
Algorithm: vqe_coblya_RA.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-15-1-1.txt
Algorithm: vqe_coblya_RA.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-15-1-1.txt
Algorithm: vqe_coblya_RA.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-15-1-1.txt
Algorithm: vqe_coblya_RA.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-15-1-1.txt
Algorithm: vqe_coblya_RA.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-15-4-1.txt
Algorithm: vqe_coblya_RA.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-15-4-1.txt
Algorithm: vqe_coblya_RA.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-15-4-1.txt
Algorithm: vqe_coblya_RA.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-15-4-1.txt
Algorithm: vqe_coblya_RA.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-15-4-1.txt
Algorithm: vqe_coblya_RA.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-15-4-1.txt
Algorithm: vqe_coblya_RA.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-15-2-1.txt
Algorithm: vqe_coblya_RA.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-15-2-1.txt
Algorithm: vqe_coblya_RA.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-15-2-1.txt
Algorithm: vqe_coblya_RA.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-15-2-1.txt
Algorithm: vqe_coblya_RA.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-15-2-1.txt
Algorithm: vqe_coblya_RA.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-15-2-1.txt
Algorithm: vqe_coblya_RA.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-15-3-1.txt
Algorithm: vqe_coblya_RA.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-15-3-1.txt
Algorithm: vqe_coblya_RA.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-15-3-1.txt
Algorithm: vqe_coblya_RA.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-15-3-1.txt
Algorithm: vqe_coblya_RA.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-15-3-1.txt
Algorithm: vqe_coblya_RA.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-15-3-1.txt
Algorithm: vqe_coblya_RA.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 223, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/VQE/vqe_coblya_RA.py", line 109, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/scipy_optimizer.py", line 148, in minimize
    raw_result = minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_minimize.py", line 719, in minimize
    res = _minimize_cobyla(fun, x0, args, constraints, callback=callback,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 35, in wrapper
    return func(*args, **kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_cobyla_py.py", line 278, in _minimize_cobyla
    sf = _prepare_scalar_function(fun, x0, args=args, jac=_jac)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_optimize.py", line 288, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
