Filename: vrp-2-1-1.txt
Algorithm: qaoa_spsa_5.py
Run: 1
Output: Route for Vehicle 1: [0, 1, 2, 0]
Optimal cost: 637
Time taken: 20.578633546829224 seconds
Error: 

--------------------------------------------------
Filename: vrp-2-1-1.txt
Algorithm: qaoa_spsa_5.py
Run: 2
Output: Route for Vehicle 1: [0, 1, 2, 0]
Optimal cost: 637
Time taken: 20.266064405441284 seconds
Error: 

--------------------------------------------------
Filename: vrp-2-1-1.txt
Algorithm: qaoa_spsa_5.py
Run: 3
Output: Route for Vehicle 1: [0, 1, 2, 0]
Optimal cost: 637
Time taken: 20.223678827285767 seconds
Error: 

--------------------------------------------------
Filename: vrp-3-1-1.txt
Algorithm: qaoa_spsa_5.py
Run: 1
Output: Route for Vehicle 1: [0, 3, 1, 2, 0]
Optimal cost: 1096
Time taken: 115.38876700401306 seconds
Error: 

--------------------------------------------------
Filename: vrp-3-1-1.txt
Algorithm: qaoa_spsa_5.py
Run: 2
Output: Route for Vehicle 1: [0, 3, 1, 2, 0]
Optimal cost: 1096
Time taken: 113.99339866638184 seconds
Error: 

--------------------------------------------------
Filename: vrp-3-1-1.txt
Algorithm: qaoa_spsa_5.py
Run: 3
Output: Route for Vehicle 1: [0, 3, 1, 2, 0]
Optimal cost: 1096
Time taken: 114.29760718345642 seconds
Error: 

--------------------------------------------------
Filename: vrp-3-2-1.txt
Algorithm: qaoa_spsa_5.py
Run: 1
Output: Route for Vehicle 1: [0, 1, 0]
Route for Vehicle 2: [0, 3, 2, 0]
Optimal cost: 1442
Time taken: 114.56000065803528 seconds
Error: 

--------------------------------------------------
Filename: vrp-3-2-1.txt
Algorithm: qaoa_spsa_5.py
Run: 2
Output: Route for Vehicle 1: [0, 1, 0]
Route for Vehicle 2: [0, 3, 2, 0]
Optimal cost: 1442
Time taken: 114.62056255340576 seconds
Error: 

--------------------------------------------------
Filename: vrp-3-2-1.txt
Algorithm: qaoa_spsa_5.py
Run: 3
Output: Route for Vehicle 1: [0, 1, 0]
Route for Vehicle 2: [0, 3, 2, 0]
Optimal cost: 1442
Time taken: 113.47402310371399 seconds
Error: 

--------------------------------------------------
Filename: vrp-4-3-1.txt
Algorithm: qaoa_spsa_5.py
Run: 1
Output: Route for Vehicle 1: [0, 1, 0]
Route for Vehicle 2: [0, 2, 0]
Route for Vehicle 3: [0, 3, 4, 0]
Optimal cost: 2183
Time taken: 14567.988240718842 seconds
Error: 

--------------------------------------------------
Filename: vrp-4-3-1.txt
Algorithm: qaoa_spsa_5.py
Run: 2
Output: Route for Vehicle 1: [0, 1, 0]
Route for Vehicle 2: [0, 2, 0]
Route for Vehicle 3: [0, 3, 4, 0]
Optimal cost: 2183
Time taken: 14752.437107801437 seconds
Error: 

--------------------------------------------------
Filename: vrp-4-3-1.txt
Algorithm: qaoa_spsa_5.py
Run: 3
Output: Route for Vehicle 1: [0, 1, 0]
Route for Vehicle 2: [0, 2, 0]
Route for Vehicle 3: [0, 3, 4, 0]
Optimal cost: 2183
Time taken: 14844.096827030182 seconds
Error: 

--------------------------------------------------
Filename: vrp-5-4-1.txt
Algorithm: qaoa_spsa_5.py
Run: 1
Output: 
Error: Killed

--------------------------------------------------
Filename: vrp-5-4-1.txt
Algorithm: qaoa_spsa_5.py
Run: 2
Output: 
Error: Killed

--------------------------------------------------
Filename: vrp-5-4-1.txt
Algorithm: qaoa_spsa_5.py
Run: 3
Output: 
Error: Killed

--------------------------------------------------
Filename: vrp-4-1-1.txt
Algorithm: qaoa_spsa_5.py
Run: 1
Output: Route for Vehicle 1: [0, 2, 1, 0]
Optimal cost: 693
Time taken: 14666.837933540344 seconds
Error: 

--------------------------------------------------
Filename: vrp-4-1-1.txt
Algorithm: qaoa_spsa_5.py
Run: 2
Output: Route for Vehicle 1: [0, 2, 1, 0]
Optimal cost: 693
Time taken: 14646.518222808838 seconds
Error: 

--------------------------------------------------
Filename: vrp-4-1-1.txt
Algorithm: qaoa_spsa_5.py
Run: 3
Output: Route for Vehicle 1: [0, 2, 1, 0]
Optimal cost: 693
Time taken: 14701.357475280762 seconds
Error: 

--------------------------------------------------
Filename: vrp-6-5-1.txt
Algorithm: qaoa_spsa_5.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 64.0 TiB for an array with shape (4398046511104,) and data type complex128

--------------------------------------------------
Filename: vrp-6-5-1.txt
Algorithm: qaoa_spsa_5.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 64.0 TiB for an array with shape (4398046511104,) and data type complex128

--------------------------------------------------
Filename: vrp-6-5-1.txt
Algorithm: qaoa_spsa_5.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 64.0 TiB for an array with shape (4398046511104,) and data type complex128

--------------------------------------------------
Filename: vrp-4-2-1.txt
Algorithm: qaoa_spsa_5.py
Run: 1
Output: Route for Vehicle 1: [0, 1, 0]
Route for Vehicle 2: [0, 4, 2, 3, 0]
Optimal cost: 1766
Time taken: 14664.802449703217 seconds
Error: 

--------------------------------------------------
Filename: vrp-4-2-1.txt
Algorithm: qaoa_spsa_5.py
Run: 2
Output: Route for Vehicle 1: [0, 1, 0]
Route for Vehicle 2: [0, 4, 2, 3, 0]
Optimal cost: 1766
Time taken: 14654.898841142654 seconds
Error: 

--------------------------------------------------
Filename: vrp-4-2-1.txt
Algorithm: qaoa_spsa_5.py
Run: 3
Output: Route for Vehicle 1: [0, 1, 0]
Route for Vehicle 2: [0, 4, 2, 3, 0]
Optimal cost: 1766
Time taken: 14762.124094486237 seconds
Error: 

--------------------------------------------------
Filename: vrp-7-6-1.txt
Algorithm: qaoa_spsa_5.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 1.00 EiB for an array with shape (72057594037927936,) and data type complex128

--------------------------------------------------
Filename: vrp-7-6-1.txt
Algorithm: qaoa_spsa_5.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 1.00 EiB for an array with shape (72057594037927936,) and data type complex128

--------------------------------------------------
Filename: vrp-7-6-1.txt
Algorithm: qaoa_spsa_5.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 1.00 EiB for an array with shape (72057594037927936,) and data type complex128

--------------------------------------------------
Filename: vrp-8-7-1.txt
Algorithm: qaoa_spsa_5.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-8-7-1.txt
Algorithm: qaoa_spsa_5.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-8-7-1.txt
Algorithm: qaoa_spsa_5.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-5-3-1.txt
Algorithm: qaoa_spsa_5.py
Run: 1
Output: 
Error: Killed

--------------------------------------------------
Filename: vrp-5-3-1.txt
Algorithm: qaoa_spsa_5.py
Run: 2
Output: 
Error: Killed

--------------------------------------------------
Filename: vrp-5-3-1.txt
Algorithm: qaoa_spsa_5.py
Run: 3
Output: 
Error: Killed

--------------------------------------------------
Filename: vrp-5-1-1.txt
Algorithm: qaoa_spsa_5.py
Run: 1
Output: 
Error: Killed

--------------------------------------------------
Filename: vrp-5-1-1.txt
Algorithm: qaoa_spsa_5.py
Run: 2
Output: 
Error: Killed

--------------------------------------------------
Filename: vrp-5-1-1.txt
Algorithm: qaoa_spsa_5.py
Run: 3
Output: 
Error: Killed

--------------------------------------------------
Filename: vrp-10-8-1.txt
Algorithm: qaoa_spsa_5.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-10-8-1.txt
Algorithm: qaoa_spsa_5.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-10-8-1.txt
Algorithm: qaoa_spsa_5.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-5-2-1.txt
Algorithm: qaoa_spsa_5.py
Run: 1
Output: 
Error: Killed

--------------------------------------------------
Filename: vrp-5-2-1.txt
Algorithm: qaoa_spsa_5.py
Run: 2
Output: 
Error: Killed

--------------------------------------------------
Filename: vrp-5-2-1.txt
Algorithm: qaoa_spsa_5.py
Run: 3
Output: 
Error: Killed

--------------------------------------------------
Filename: vrp-6-4-1.txt
Algorithm: qaoa_spsa_5.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 64.0 TiB for an array with shape (4398046511104,) and data type complex128

--------------------------------------------------
Filename: vrp-6-4-1.txt
Algorithm: qaoa_spsa_5.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 64.0 TiB for an array with shape (4398046511104,) and data type complex128

--------------------------------------------------
Filename: vrp-6-4-1.txt
Algorithm: qaoa_spsa_5.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 64.0 TiB for an array with shape (4398046511104,) and data type complex128

--------------------------------------------------
Filename: vrp-6-1-1.txt
Algorithm: qaoa_spsa_5.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 64.0 TiB for an array with shape (4398046511104,) and data type complex128

--------------------------------------------------
Filename: vrp-6-1-1.txt
Algorithm: qaoa_spsa_5.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 64.0 TiB for an array with shape (4398046511104,) and data type complex128

--------------------------------------------------
Filename: vrp-6-1-1.txt
Algorithm: qaoa_spsa_5.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 64.0 TiB for an array with shape (4398046511104,) and data type complex128

--------------------------------------------------
Filename: vrp-7-5-1.txt
Algorithm: qaoa_spsa_5.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 1.00 EiB for an array with shape (72057594037927936,) and data type complex128

--------------------------------------------------
Filename: vrp-7-5-1.txt
Algorithm: qaoa_spsa_5.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 1.00 EiB for an array with shape (72057594037927936,) and data type complex128

--------------------------------------------------
Filename: vrp-7-5-1.txt
Algorithm: qaoa_spsa_5.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 1.00 EiB for an array with shape (72057594037927936,) and data type complex128

--------------------------------------------------
Filename: vrp-8-6-1.txt
Algorithm: qaoa_spsa_5.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-8-6-1.txt
Algorithm: qaoa_spsa_5.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-8-6-1.txt
Algorithm: qaoa_spsa_5.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-6-2-1.txt
Algorithm: qaoa_spsa_5.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 64.0 TiB for an array with shape (4398046511104,) and data type complex128

--------------------------------------------------
Filename: vrp-6-2-1.txt
Algorithm: qaoa_spsa_5.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 64.0 TiB for an array with shape (4398046511104,) and data type complex128

--------------------------------------------------
Filename: vrp-6-2-1.txt
Algorithm: qaoa_spsa_5.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 64.0 TiB for an array with shape (4398046511104,) and data type complex128

--------------------------------------------------
Filename: vrp-10-7-1.txt
Algorithm: qaoa_spsa_5.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-10-7-1.txt
Algorithm: qaoa_spsa_5.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-10-7-1.txt
Algorithm: qaoa_spsa_5.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-8-5-1.txt
Algorithm: qaoa_spsa_5.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-8-5-1.txt
Algorithm: qaoa_spsa_5.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-8-5-1.txt
Algorithm: qaoa_spsa_5.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-7-4-1.txt
Algorithm: qaoa_spsa_5.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 1.00 EiB for an array with shape (72057594037927936,) and data type complex128

--------------------------------------------------
Filename: vrp-7-4-1.txt
Algorithm: qaoa_spsa_5.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 1.00 EiB for an array with shape (72057594037927936,) and data type complex128

--------------------------------------------------
Filename: vrp-7-4-1.txt
Algorithm: qaoa_spsa_5.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 1.00 EiB for an array with shape (72057594037927936,) and data type complex128

--------------------------------------------------
Filename: vrp-6-3-1.txt
Algorithm: qaoa_spsa_5.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 64.0 TiB for an array with shape (4398046511104,) and data type complex128

--------------------------------------------------
Filename: vrp-6-3-1.txt
Algorithm: qaoa_spsa_5.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 64.0 TiB for an array with shape (4398046511104,) and data type complex128

--------------------------------------------------
Filename: vrp-6-3-1.txt
Algorithm: qaoa_spsa_5.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 64.0 TiB for an array with shape (4398046511104,) and data type complex128

--------------------------------------------------
Filename: vrp-8-1-1.txt
Algorithm: qaoa_spsa_5.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-8-1-1.txt
Algorithm: qaoa_spsa_5.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-8-1-1.txt
Algorithm: qaoa_spsa_5.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-8-4-1.txt
Algorithm: qaoa_spsa_5.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-8-4-1.txt
Algorithm: qaoa_spsa_5.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-8-4-1.txt
Algorithm: qaoa_spsa_5.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-10-6-1.txt
Algorithm: qaoa_spsa_5.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-10-6-1.txt
Algorithm: qaoa_spsa_5.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-10-6-1.txt
Algorithm: qaoa_spsa_5.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-8-3-1.txt
Algorithm: qaoa_spsa_5.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-8-3-1.txt
Algorithm: qaoa_spsa_5.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-8-3-1.txt
Algorithm: qaoa_spsa_5.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-8-2-1.txt
Algorithm: qaoa_spsa_5.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-8-2-1.txt
Algorithm: qaoa_spsa_5.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-8-2-1.txt
Algorithm: qaoa_spsa_5.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-10-5-1.txt
Algorithm: qaoa_spsa_5.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-10-5-1.txt
Algorithm: qaoa_spsa_5.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-10-5-1.txt
Algorithm: qaoa_spsa_5.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-10-1-1.txt
Algorithm: qaoa_spsa_5.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-10-1-1.txt
Algorithm: qaoa_spsa_5.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-10-1-1.txt
Algorithm: qaoa_spsa_5.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-10-4-1.txt
Algorithm: qaoa_spsa_5.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-10-4-1.txt
Algorithm: qaoa_spsa_5.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-10-4-1.txt
Algorithm: qaoa_spsa_5.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-10-3-1.txt
Algorithm: qaoa_spsa_5.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-10-3-1.txt
Algorithm: qaoa_spsa_5.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-10-3-1.txt
Algorithm: qaoa_spsa_5.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-15-8-1.txt
Algorithm: qaoa_spsa_5.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-15-8-1.txt
Algorithm: qaoa_spsa_5.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-15-8-1.txt
Algorithm: qaoa_spsa_5.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-15-7-1.txt
Algorithm: qaoa_spsa_5.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-15-7-1.txt
Algorithm: qaoa_spsa_5.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-15-7-1.txt
Algorithm: qaoa_spsa_5.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-15-6-1.txt
Algorithm: qaoa_spsa_5.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-15-6-1.txt
Algorithm: qaoa_spsa_5.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-15-6-1.txt
Algorithm: qaoa_spsa_5.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-15-5-1.txt
Algorithm: qaoa_spsa_5.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-15-5-1.txt
Algorithm: qaoa_spsa_5.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-15-5-1.txt
Algorithm: qaoa_spsa_5.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-15-1-1.txt
Algorithm: qaoa_spsa_5.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-15-1-1.txt
Algorithm: qaoa_spsa_5.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-15-1-1.txt
Algorithm: qaoa_spsa_5.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-15-4-1.txt
Algorithm: qaoa_spsa_5.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-15-4-1.txt
Algorithm: qaoa_spsa_5.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-15-4-1.txt
Algorithm: qaoa_spsa_5.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-15-2-1.txt
Algorithm: qaoa_spsa_5.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-15-2-1.txt
Algorithm: qaoa_spsa_5.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-15-2-1.txt
Algorithm: qaoa_spsa_5.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-15-3-1.txt
Algorithm: qaoa_spsa_5.py
Run: 1
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-15-3-1.txt
Algorithm: qaoa_spsa_5.py
Run: 2
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
Filename: vrp-15-3-1.txt
Algorithm: qaoa_spsa_5.py
Run: 3
Output: 
Error: Traceback (most recent call last):
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 231, in <module>
    quantum_solution, quantum_cost = quantum_optimizer.solve_problem(qp)
  File "/home/krupa/Documents/VRP/VRP_RUN/QAOA/qaoa_spsa_5.py", line 112, in solve_problem
    result = optimizer.solve(qp)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 205, in solve
    return self._solve_internal(operator, offset, problem_, problem)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_optimization/algorithms/minimum_eigen_optimizer.py", line 218, in _solve_internal
    eigen_result = self._min_eigen_solver.compute_minimum_eigenvalue(operator)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 225, in compute_minimum_eigenvalue
    optimizer_result = self.optimizer.minimize(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 515, in minimize
    get_eta, get_eps = self.calibrate(fun, x0, max_evals_grouped=self._max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 335, in calibrate
    losses = _batch_evaluate(loss, points, max_evals_grouped)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/optimizers/spsa.py", line 713, in _batch_evaluate
    results += _as_list(function(batch))
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/sampling_vqe.py", line 318, in evaluate_energy
    estimator_result = estimator.run(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit_algorithms/minimum_eigensolvers/diagonal_estimator.py", line 122, in _call
    sampler_result = job.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/primitive_job.py", line 51, in result
    return self._future.result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 446, in result
    return self.__get_result()
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/concurrent/futures/thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 101, in _call
    probabilities = [
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/primitives/sampler.py", line 102, in <listcomp>
    Statevector(bound_circuit_to_instruction(circ)).probabilities_dict(
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 93, in __init__
    self._data = Statevector.from_instruction(data).data
  File "/home/krupa/anaconda3/envs/VRPenv/lib/python3.9/site-packages/qiskit/quantum_info/states/statevector.py", line 766, in from_instruction
    init = np.zeros(2**instruction.num_qubits, dtype=complex)
ValueError: Maximum allowed dimension exceeded

--------------------------------------------------
